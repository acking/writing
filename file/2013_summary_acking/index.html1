<!doctype html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=1024" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <title>2013年终总结-陈琦</title>
    
    <meta name="description" content="2014年终总结" />
    <meta name="author" content="acking" />

    <link href="http://fonts.googleapis.com/css?family=Open+Sans:regular,semibold,italic,italicsemibold|PT+Sans:400,700,400italic,700italic|PT+Serif:400,700,400italic,700italic" rel="stylesheet" />

    <link href="css/impress-demo.css" rel="stylesheet" />

    <link href="css/my.css" rel="stylesheet" />
    <!--
    <link href="js/tipTipv13/tipTip.css" rel="stylesheet" />
    <script src="js/jquery.v1.3.2.js"></script>
    <script src="js/tipTipv13/jquery.tipTip.js"></script>
    <script src="js/tipTipv13/jquery.tipTip.minified.js"></script>
    -->
    <!--
    <script src="js/jquery.v1.3.2.js"></script>
    <script src="js/tip.js"></script>
    -->
    <script src="js/jquery.v1.3.2.js"></script>
    <link rel="shortcut icon" href="img/acshow.png" />
    <link rel="apple-touch-icon" href="img/acshow.png" />
    <script>
    $(document).ready(function(){
        $(document).dblclick(function(){
            location.hash='/overview'
        })
    })
    </script>

</head>

<body class="impress-not-supported">

<!--
    For example this fallback message is only visible when there is `impress-not-supported` class on body.
-->
<div class="fallback-message">
    <p>Your browser <b>doesn't support the features required</b> by impress.js, so you are presented with a simplified version of this presentation.</p>
    <p>For the best experience please use the latest <b>Chrome</b>, <b>Safari</b> or <b>Firefox</b> browser.</p>
</div>
<div id="impress">

    <!--
        
        Here is where interesting thing start to happen.
        
        Each step of the presentation should be an element inside the `#impress` with a class name
        of `step`. These step elements are positioned, rotated and scaled by impress.js, and
        the 'camera' shows them on each step of the presentation.
        
        Positioning information is passed through data attributes.
        
        In the example below we only specify x and y position of the step element with `data-x="-1000"`
        and `data-y="-1500` attributes. This means that **the center** of the element (yes, the center)
        will be positioned in point x = -1000px and y = -1500px of the presentation 'canvas'.
        
        It will not be rotated or scaled.
        
    -->
    <!-- step-1 -->
    <div id="bored" class="step slide" data-x="-1000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/overview" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/imagination" ><img src="img/next.png" /></a>
        </div>
        <div class="s01">
            <h1>2013年终总结</h1>
            <h2>陈&nbsp;&nbsp;琦</h2>
            <h3>2014/01/17</h3>
        </div>
    </div>

    <!-- step-2 -->
    <div class="step slide responsibilitybg" data-x="0" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/imagination" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/ing" ><img src="img/next.png" /></a>
        </div>
        <div class="responsibility">
            <h1>这一年都干嘛了？</h1>
            <ul>
                <li><span title="网站设计.">网站设计</span></li>
                <li>网站规划</li>
                <li><span class="underline red">团队管理</span></li>
                <li>服务器管理</li>
            </ul>
        </div>
    </div>

    <!-- step-3 -->
    <div class="step slide year2013bg" data-x="1000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/ing" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/ing" ><img src="img/next.png" /></a>
        </div>
        <div class="year2013">
            <h1>走过的，二零一三</h1>
            <ul>
                <li><a href="#/step-4">录入平台</a></li>
                <li><a href="#/step-5">考务平台</a></li>
                <li><a href="#/step-6">教务平台</a></li>
                <li><a href="#/step-7">内部OA系统升级</a></li>
            </ul>
        </div>
    </div>

    <!-- step-4 -->
    <div class="step slide" data-x="2000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/ing" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/step-5" ><img src="img/next.png" /></a>
        </div>
        <div class="project">
            <h1>录入平台</h1>
            <div class="excel">
               <img src="sucai/hd-excel.jpg" width="380" />
               <img src="sucai/hb-excel.jpg" width="380" />
            </div>
        </div>
    </div>
    <!-- step-5 -->
<!--     <div class="step slide" data-x="3000" data-y="-1500">
        <q>5</q>
    </div> -->
    <!-- step-6 -->
<!--     <div class="step slide" data-x="4000" data-y="-1500">
        <q>6</q>
    </div> -->
    <!-- step-7 -->
    <div class="step slide" data-x="5000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/ing" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/ing" ><img src="img/next.png" /></a>
        </div>
        <div class="project">
            <h1>考务平台</h1>
            <div class="excel">
               <img src="sucai/kw-excel.jpg" width="600" />
            </div>
        </div>
    </div>
    <!-- step-8 -->
    <div class="step slide" data-x="6000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/ing" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/ing" ><img src="img/next.png" /></a>
        </div>
        <div class="project">
            <h1>教务平台</h1>
            <div class="excel">
               <img src="sucai/bjjw-excel.jpg" width="600" />
            </div>
        </div>
    </div>
    <!-- step-9 -->
    <div class="step slide oabg" data-x="7000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/ing" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/ing" ><img src="img/next.png" /></a>
        </div>
        <div class="project">
            <h1>内部OA系统</h1>
            <ul>
                <li>添加财务管理模块</li>
                <li>OA系统升级及优化(<span class="red">邮件提醒</a>)</li>
            </ul>
        </div>
    </div>
    <!-- step-10 -->
    <div class="step slide" data-x="8000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/ing" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/ing" ><img src="img/next.png" /></a>
        </div>
        <div class="project">
            <h1>项目数据统计及分析</h1>
            <div class="excel">
               <br /><img src="sucai/tj-excel.jpg" width="780" />
            </div>
        </div>
    </div>
    <!-- step-11 -->
    <div class="step slide" data-x="9000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/ing" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/ing" ><img src="img/next.png" /></a>
        </div>
        <div class="project">
            <h1>服务器请求数统计</h1>
            <div class="excel">
                <img src="sucai/server-excel.jpg" />
            </div>
        </div>
    </div>
    <!-- step-12 -->
    <div class="step slide" data-x="10000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/ing" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/imagination" ><img src="img/next.png" /></a>
        </div>
        <div class="project">
            <h1>设备支持</h1>
            <div class="excel">
                <img src="sucai/device-excel.jpg" width="650" />
            </div>
        </div>
    </div>
    <!-- step-13 -->
    <div class="step slide questionbg" data-x="11000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/imagination" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/step-12" ><img src="img/next.png" /></a>
        </div>
        <div class="question">
            <h1>工作中的问题</h1>
            <ul>
                <li>项目问题</li>
                <li>人员问题</li>
                <li>团队管理问题</li>
                <li>服务器管理问题</li>
            </ul>
        </div>
    </div>
    <!-- step-14 -->
    <div class="step slide questionbg01" data-x="12000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/imagination" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/its" ><img src="img/next.png" /></a>
        </div>
        <div class="project">
            <h2>项目问题</h2>
            <p>都是做技术的，如果是项目代码有问题，或者什么难题，无非就是死磕</p>
            <h2>人员问题</h2>
            <p>这个很重要...</p>
            <h2>团队建设</h2>
            <p>这个很重要...</p>
            <h2>服务器问题</h2>
            <p>服务器性能、运作、数据备份、数据安全。多服务器的架设</p>

        </div>
    </div>
    <!-- step-15 -->
    <div class="step slide year2014bg" data-x="13000" data-y="-1500">
        <div class="page">
                <a class="alfloat" href="#/its" ><img src="img/prev.png" /></a>
                <a class="arfloat" href="#/one-more-thing" ><img src="img/next.png" /></a>
        </div>
        <div class="year2014">
            <h1>二零一四工作规划</h1>
            <ul>
                <li>1、北航平台功能模块整合</li>
                <li>2、各项目说明文档的制作</li>
                <li>3、数据安全及备份</li>
                <li>4、项目代码优化及数据库优化</li>
                <li>5、北航平台的权限重新设计</li>
            </ul>
        </div>
    </div>
    <!--
        
        This is an example of step element being scaled.
        
        Again, we use a `data-` attribute, this time it's `data-scale="4"`, so it means that this
        element will be 4 times larger than the others.
        From presentation and transitions point of view it means, that it will have to be scaled
        down (4 times) to make it back to its correct size.
        
    -->
    <div id="title" class="step" data-x="0" data-y="0" data-scale="4">
        <span class="try">2013年终总结</span>
        <h1>陈琦<sup><img src="img/acshow.png" /></sup></h1>
        <span class="footnote"><sup>©</sup> 2014 acshow.net All rights reserved</span>
    </div>

    <!--
        
        This element introduces rotation.
        
        Notation shouldn't be a surprise. We use `data-rotate="90"` attribute, meaning that this
        element should be rotated by 90 degrees clockwise.
        
    -->
    <div id="its" class="step" data-x="850" data-y="3000" data-rotate="90" data-scale="5">
        <h1><strong>贰零壹肆</strong><a href="#/step-13">工作规划</a></h1>
        <h2>1、北航平台功能模块整合<br/></h2>
        <h2>2、各项目说明文档的制作<br/></h2>
        <h2>3、数据安全及备份<br/></h2>
        <h2>4、项目代码优化及数据库优化<br/></h2>
        <h2>5、北航平台的权限重新设计<br/></h2>
    </div>

    <div id="big" class="step" data-x="3500" data-y="2100" data-rotate="180" data-scale="6">
        <p class="bhlogo"><span class="color6"># hello world #</span><b>总结</b> <span class="thoughts"><a href="#/bored">Starting...</a></span></p>
    </div>

    <!--
        
        And now it gets really exciting! We move into third dimension!
        
        Along with `data-x` and `data-y`, you can define the position on third (Z) axis, with
        `data-z`. In the example below we use `data-z="-3000"` meaning that element should be
        positioned far away from us (by 3000px).
        
    -->
    <div id="tiny" class="step" data-x="2825" data-y="2325" data-z="-3000" data-rotate="300" data-scale="1">
        <p><a href="#/overview">G<b>ame Ove</b>r</a></p>
    </div>

    <!--
        
        This step here doesn't introduce anything new when it comes to data attributes, but you
        should notice in the demo that some words of this text are being animated.
        It's a very basic CSS transition that is applied to the elements when this step element is
        reached.
        
        At the very beginning of the presentation all step elements are given the class of `future`.
        It means that they haven't been visited yet.
        
        When the presentation moves to given step `future` is changed to `present` class name.
        That's how animation on this step works - text moves when the step has `present` class.
        
        Finally when the step is left the `present` class is removed from the element and `past`
        class is added.
        
        So basically every step element has one of three classes: `future`, `present` and `past`.
        Only one current step has the `present` class.
        
    -->
    <div id="ing" class="step" data-x="3500" data-y="-850" data-rotate="270" data-scale="6">
        <p>走过的 , <b class="positioning"><a class="no-a" href="#/step-3">二零一三</a></b></p>
        <hr>
        <h2><b class="rotating"><a href="#/step-4">录入平台</a></b> & <b class="scaling"><a href="#/step-5">考务平台</a></b></h2>
        <h2><b class="scaling"><a href="#/step-6">教务平台</a></b> & <b class="rotating"><a href="#/step-8">项目统计</a></b></h2>
        <h2><b class="positioning"><a class="no-a" href="#/step-7">内部OA升级</a> -（+财务模块）</b></h2>
    </div>

    <div id="imagination" class="step" data-x="6700" data-y="-300" data-scale="6">
        <p><a href="#/step-2">工作<b>职责</b></a><b class="imagination font55">设计 & 管理</b></p>
        <p><b class="imagination font70"><a href="#/step-11">工作问题</a></b>解决<b>方法</b></p>
    </div>

    <div id="source" class="step" data-x="6300" data-y="2000" data-rotate="20" data-scale="4">
        <p>以上是我的述职报告，请予审议。</p>
        <q><a href="#/tiny">谢谢大家</a>!</q>
    </div>

    <div id="one-more-thing" class="step" data-x="6000" data-y="4000" data-scale="2">
        <p>更多的思考...</p>
    </div>

    <!--
        
        And the last one shows full power and flexibility of impress.js.
        
        You can not only position element in 3D, but also rotate it around any axis.
        So this one here will get rotated by -40 degrees (40 degrees anticlockwise) around X axis and
        10 degrees (clockwise) around Y axis.
        
        You can of course rotate it around Z axis with `data-rotate-z` - it has exactly the same effect
        as `data-rotate` (these two are basically aliases).
        
    -->
    <div id="its-in-3d" class="step" data-x="6200" data-y="4300" data-z="-100" data-rotate-x="-40" data-rotate-y="10" data-scale="2">
        <p><span class="have">金钱</span> <span class="you">技术</span> <span class="noticed">管理</span> <span class="its">人脉</span> <span class="in">资源</span> <b><sup>*</sup></b>?</p>
        <span class="footnote">* 努力 & 加油 ;)</span>
    </div>

    <!--
        
        So to make a summary of all the possible attributes used to position presentation steps, we have:
        
        * `data-x`, `data-y`, `data-z` - they define the position of **the center** of step element on
            the canvas in pixels; their default value is 0;
        * `data-rotate-x`, `data-rotate-y`, 'data-rotate-z`, `data-rotate` - they define the rotation of
            the element around given axis in degrees; their default value is 0; `data-rotate` and `data-rotate-z`
            are exactly the same;
        * `data-scale` - defines the scale of step element; default value is 1
        
        These values are used by impress.js in CSS transformation functions, so for more information consult
        CSS transfrom docs: https://developer.mozilla.org/en/CSS/transform
        
    -->
    <div id="overview" class="step" data-x="3000" data-y="1500" data-scale="10">
    </div>

</div>

<!--
    
    Hint is not related to impress.js in any way.
    
    But it can show you how to use impress.js features in creative way.
    
    When the presentation step is shown (selected) its element gets the class of "active" and the body element
    gets the class based on active step id `impress-on-ID` (where ID is the step's id)... It may not be
    so clear because of all these "ids" in previous sentence, so for example when the first step (the one with
    the id of `bored`) is active, body element gets a class of `impress-on-bored`.
    
    This class is used by this hint below. Check CSS file to see how it's shown with delayed CSS animation when
    the first step of presentation is visible for a couple of seconds.
    
    ...
    
    And when it comes to this piece of JavaScript below ... kids, don't do this at home ;)
    It's just a quick and dirty workaround to get different hint text for touch devices.
    In a real world it should be at least placed in separate JS file ... and the touch content should be
    probably just hidden somewhere in HTML - not hard-coded in the script.
    
    Just sayin' ;)
    
-->
<!-- <div class="hint">
    <p>Use a spacebar or arrow keys to navigate</p>
</div> -->
<script>
if ("ontouchstart" in document.documentElement) { 
    document.querySelector(".hint").innerHTML = "<p>Tap on the left or right to navigate</p>";
}
</script>

<!--
    
    Last, but not least.
    
    To make all described above really work, you need to include impress.js in the page.
    I strongly encourage to minify it first.
    
    In here I just include full source of the script to make it more readable.
    
    You also need to call a `impress().init()` function to initialize impress.js presentation.
    And you should do it in the end of your document. Not only because it's a good practice, but also
    because it should be done when the whole document is ready.
    Of course you can wrap it in any kind of "DOM ready" event, but I was too lazy to do so ;)
    
-->
<script src="js/impress.js"></script>
<script>impress().init();</script>

<!--
    
    The `impress()` function also gives you access to the API that controls the presentation.
    
    Just store the result of the call:
    
        var api = impress();
    
    and you will get three functions you can call:
    
        `api.init()` - initializes the presentation,
        `api.next()` - moves to next step of the presentation,
        `api.prev()` - moves to previous step of the presentation,
        `api.goto( idx | id | element, [duration] )` - moves the presentation to the step given by its index number
                id or the DOM element; second parameter can be used to define duration of the transition in ms,
                but it's optional - if not provided default transition duration for the presentation will be used.
    
    You can also simply call `impress()` again to get the API, so `impress().next()` is also allowed.
    Don't worry, it wont initialize the presentation again.
    
    For some example uses of this API check the last part of the source of impress.js where the API
    is used in event handlers.
    
-->
</body>
</html>

